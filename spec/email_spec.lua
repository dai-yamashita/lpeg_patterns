local lpeg = require "lpeg"

describe("email_nocfws Addresses", function()
	local email = require "lpeg_patterns.email".email * lpeg.P(-1)
	it("Pass valid addresses", function()
		assert.truthy ( email:match( "localpart@example.com" ) )
	end)
	it("Deny invalid addresses", function()
		assert.falsy ( email:match( "not an address" ) )
	end)
	it("Handle unusual localpart", function()
		assert.truthy ( email:match "foo.bar@example.com" )
		assert.truthy ( email:match "foo+@example.com" )
		assert.truthy ( email:match "foo+bar@example.com" )
		assert.truthy ( email:match "!#$%&'*+-/=?^_`{}|~@example.com" )
		assert.truthy ( email:match [["quoted"@example.com]] )
		assert.truthy ( email:match [["quoted string"@example.com]] )
		assert.truthy ( email:match [["quoted@symbol"@example.com]] )
		assert.truthy ( email:match [=["very.(),:;<>[]\".VERY.\"very@\\ \"very\".unusual"@example.com]=] )
	end)
	it("Ignore invalid localpart", function()
		assert.falsy ( email:match "@example.com" )
		assert.falsy ( email:match ".@example.com" )
		assert.falsy ( email:match "foobar.@example.com" )
		assert.falsy ( email:match "@foo@example.com" )
		assert.falsy ( email:match "foo@bar@example.com" )
		assert.falsy ( email:match [[just"not"right@example.com]] ) -- quoted strings must be dot separated, or the only element making up the local-part
		assert.falsy ( email:match( "\127@example.com" ) )
	end)
	it("Handle unusual hosts", function()
		assert.truthy ( email:match "localpart@host_name" )
		assert.truthy ( email:match "localpart@[127.0.0.1]" )
		assert.truthy ( email:match "localpart@[IPv6:2001::d1]" )
		assert.truthy ( email:match "localpart@[::1]" )
	end)
	it("Handle comments", function()
		assert.truthy ( email:match "(comment)localpart@example.com" )
		assert.truthy ( email:match "localpart(comment)@example.com" )
		assert.truthy ( email:match "(comment)\"quoted\"@example.com" )
		assert.truthy ( email:match "\"quoted\"(comment)@example.com" )
		assert.truthy ( email:match "localpart@(comment)example.com" )
		assert.truthy ( email:match "localpart@example.com(comment)" )
	end)
end)
describe("email nocfws variants", function()
	local email_nocfws = require "lpeg_patterns.email".email_nocfws * lpeg.P(-1)
	it("Pass valid addresses", function()
		assert.truthy ( email_nocfws:match( "localpart@example.com" ) )
	end)
	it("Deny invalid addresses", function()
		assert.falsy ( email_nocfws:match( "not an address" ) )
	end)
	it("Handle unusual localpart", function()
		assert.truthy ( email_nocfws:match "foo.bar@example.com" )
		assert.truthy ( email_nocfws:match "foo+@example.com" )
		assert.truthy ( email_nocfws:match "foo+bar@example.com" )
		assert.truthy ( email_nocfws:match "!#$%&'*+-/=?^_`{}|~@example.com" )
		assert.truthy ( email_nocfws:match [["quoted"@example.com]] )
		assert.truthy ( email_nocfws:match [["quoted string"@example.com]] )
		assert.truthy ( email_nocfws:match [["quoted@symbol"@example.com]] )
		assert.truthy ( email_nocfws:match [=["very.(),:;<>[]\".VERY.\"very@\\ \"very\".unusual"@example.com]=] )
	end)
	it("Ignore invalid localpart", function()
		assert.falsy ( email_nocfws:match "@example.com" )
		assert.falsy ( email_nocfws:match ".@example.com" )
		assert.falsy ( email_nocfws:match "foobar.@example.com" )
		assert.falsy ( email_nocfws:match "@foo@example.com" )
		assert.falsy ( email_nocfws:match "foo@bar@example.com" )
		assert.falsy ( email_nocfws:match [[just"not"right@example.com]] ) -- quoted strings must be dot separated, or the only element making up the local-part
		assert.falsy ( email_nocfws:match( "\127@example.com" ) )
	end)
	it("Handle unusual hosts", function()
		assert.truthy ( email_nocfws:match "localpart@host_name" )
		assert.truthy ( email_nocfws:match "localpart@[127.0.0.1]" )
		assert.truthy ( email_nocfws:match "localpart@[IPv6:2001::d1]" )
		assert.truthy ( email_nocfws:match "localpart@[::1]" )
	end)
	it("Doesn't allow comments", function()
		assert.falsy ( email_nocfws:match "(comment)localpart@example.com" )
		assert.falsy ( email_nocfws:match "localpart(comment)@example.com" )
		assert.falsy ( email_nocfws:match "(comment)\"quoted\"@example.com" )
		assert.falsy ( email_nocfws:match "\"quoted\"(comment)@example.com" )
		assert.falsy ( email_nocfws:match "localpart@example.com(comment)" )
		assert.falsy ( email_nocfws:match "localpart@example.com(comment)" )
	end)
end)
